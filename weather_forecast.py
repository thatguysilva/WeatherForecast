# -*- coding: utf-8 -*-
"""weather-forecast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/133hR3i8w6HN8LyXIEL3gRBmDPRv41Qnk
"""

import pandas as pd

# Load the dataset
file_path = 'nyc_temperature.csv'

nyc_weather_data = pd.read_csv(file_path)
nyc_weather_data.replace('T', 0, inplace=True)
# Display the first few rows of the dataset to understand its structure
nyc_weather_data.head()

pip install prophet

# Convert 'date' to datetime and prepare the dataframe
nyc_weather_data['date'] = pd.to_datetime(nyc_weather_data['date'], format='%d/%m/%y')
prophet_df = nyc_weather_data[['date', 'HDD']].copy()
prophet_df.rename(columns={'date': 'ds', 'HDD': 'y'}, inplace=True)

from prophet import Prophet

model = Prophet()
model.fit(prophet_df)

# For example, forecasting for the next 365 days
future = model.make_future_dataframe(periods=365)
forecast = model.predict(future)

fig1 = model.plot(forecast)
fig2 = model.plot_components(forecast)

# Load the new dataset
new_file_path = 'NYC_Central_Park_weather.csv'
nyc_new_weather_data = pd.read_csv(new_file_path)
nyc_new_weather_data.replace('T', 0, inplace=True)
nyc_new_weather_data['DATE'] = pd.to_datetime(nyc_new_weather_data['DATE'])

# Sort the data by the 'DATE' column in ascending order
nyc_new_weather_data.sort_values(by='DATE', inplace=True)
# Display the first few rows of the new dataset to understand its structure
nyc_new_weather_data.head()

prophet_df = nyc_new_weather_data[['DATE', 'TMAX']].copy()
prophet_df.rename(columns={'DATE': 'ds', 'TMAX': 'y'}, inplace=True)

model = Prophet()
model.fit(prophet_df)

future = model.make_future_dataframe(periods=365*10)  # for example, forecasting 1 year into the future
forecast = model.predict(future)

fig1 = model.plot(forecast)
fig2 = model.plot_components(forecast)

import matplotlib.pyplot as plt
import pandas as pd

# Assuming 'forecast' is your forecast dataframe and 'model' is your trained Prophet model

# Create the plot
fig1 = model.plot(forecast)

# Convert string dates to datetime objects
start_date = pd.to_datetime('2020-01-01')
end_date = pd.to_datetime('2040-01-01')

# Adjust the x-axis to display data from 2020 to 2040
plt.xlim(start_date, end_date)

# Show the plot
plt.show()

